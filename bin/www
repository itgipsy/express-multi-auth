#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-local-mongo-auth:server');
const http = require('http');
const fs = require('fs');
const https = require('https');
const config = require('../config/appcfg.js');

if (config.http.enabled) {
  // set HTTP port
  const http_port = normalizePort(process.env.PORT || config.http.port || '8080');
  // create HTTP server
  const server = http.createServer(app);

  // start listening on the configured port
  server.listen(http_port);
  server.on('error', onError);
  server.on('listening', () => {
    console.log('HTTP server started on port ' + http_port);
  });
}

if (config.https.enabled) {
  // set HTTPS port
  const https_port = normalizePort(process.env.SSL_PORT || config.https.port || '8443');

  // configure ssl key
  const server_key = fs.readFileSync(config.https.key, 'utf8');
  const server_crt = fs.readFileSync(config.https.crt, 'utf8');
  const ssloptions = { key: server_key, cert: server_crt };
  if (config.https.passphrase.length > 0) ssloptions.passphrase = config.https.passphrase;

  // create HTTPS server
  const sslserver = https.createServer(ssloptions, app);

  // start listening on the configured port
  sslserver.listen(https_port);
  sslserver.on('error', onError);
  sslserver.on('listening', () => {
    console.log('HTTPS server started on port ' + https_port);
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for server "error" event.
 */

function onError(error) {
  switch (error.code) {
    case 'EACCES':
      console.error('Port requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + error.port + ' already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
